<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Esp32 on stemwith</title><link>https://stemwith.github.io/categories/esp32/</link><description>Recent content in Esp32 on stemwith</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Thu, 02 Dec 2021 18:27:53 +0900</lastBuildDate><atom:link href="https://stemwith.github.io/categories/esp32/index.xml" rel="self" type="application/rss+xml"/><item><title>ESP32, RC카</title><link>https://stemwith.github.io/posts/esp32-rc%EC%B9%B4/</link><pubDate>Thu, 02 Dec 2021 18:27:53 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-rc%EC%B9%B4/</guid><description>&lt;h3 id="샤시-조립"&gt;샤시 조립&lt;a class="anchor" href="#%ec%83%a4%ec%8b%9c-%ec%a1%b0%eb%a6%bd"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="샤시-부품"&gt;샤시 부품&lt;a class="anchor" href="#%ec%83%a4%ec%8b%9c-%eb%b6%80%ed%92%88"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th style="text-align: center"&gt;번호&lt;/th&gt;
 &lt;th style="text-align: center"&gt;부품&lt;/th&gt;
 &lt;th style="text-align: center"&gt;사진&lt;/th&gt;
 &lt;th style="text-align: center"&gt;수량&lt;/th&gt;
 &lt;th style="text-align: center"&gt;용도 및 참고사항&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;전륜 회전축&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-14.png" alt="/image/r/ESP32-RC-Car-14.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;베어링(대)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-18.png" alt="/image/r/ESP32-RC-Car-18.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;3&lt;/td&gt;
 &lt;td style="text-align: center"&gt;스티어링 컵&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-08.png" alt="/image/r/ESP32-RC-Car-08.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;4&lt;/td&gt;
 &lt;td style="text-align: center"&gt;커플러 고정핀&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-16.png" alt="/image/r/ESP32-RC-Car-16.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;5&lt;/td&gt;
 &lt;td style="text-align: center"&gt;베어링(중)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-19.png" alt="/image/r/ESP32-RC-Car-19.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;6&lt;/td&gt;
 &lt;td style="text-align: center"&gt;(전륜) 육각 커플러&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 80%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-15.png" alt="/image/r/ESP32-RC-Car-15.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;7&lt;/td&gt;
 &lt;td style="text-align: center"&gt;휠&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-01.png" alt="/image/r/ESP32-RC-Car-01.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;4&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;8&lt;/td&gt;
 &lt;td style="text-align: center"&gt;나이록 너트(M4)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-22.png" alt="/image/r/ESP32-RC-Car-22.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;9&lt;/td&gt;
 &lt;td style="text-align: center"&gt;십자형 육각 복스&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-17.png" alt="/image/r/ESP32-RC-Car-17.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;10&lt;/td&gt;
 &lt;td style="text-align: center"&gt;볼 조인트 커넥팅 로드&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-09.png" alt="/image/r/ESP32-RC-Car-09.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;홀 간격 80.5mm 유지&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;11&lt;/td&gt;
 &lt;td style="text-align: center"&gt;볼 조인트 커넥팅 로드&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-35.png" alt="/image/r/ESP32-RC-Car-35.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;홀 간격 51mm 유지&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;12&lt;/td&gt;
 &lt;td style="text-align: center"&gt;서보모터&lt;br&gt;MG996R&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-54.png" alt="/image/r/ESP32-RC-Car-54.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;13&lt;/td&gt;
 &lt;td style="text-align: center"&gt;ㄴ자 서보모터 브라켓&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-11.png" alt="/image/r/ESP32-RC-Car-11.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;14&lt;/td&gt;
 &lt;td style="text-align: center"&gt;휠 베이스 고정판&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-12.png" alt="/image/r/ESP32-RC-Car-12.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;15&lt;/td&gt;
 &lt;td style="text-align: center"&gt;서보 혼&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-25.png" alt="/image/r/ESP32-RC-Car-25.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;(볼트 포함)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;16&lt;/td&gt;
 &lt;td style="text-align: center"&gt;나이록 너트&lt;br&gt;(M2.5)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-23.png" alt="/image/r/ESP32-RC-Car-23.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;17&lt;/td&gt;
 &lt;td style="text-align: center"&gt;샤시 하판&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-03.png" alt="/image/r/ESP32-RC-Car-03.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;18&lt;/td&gt;
 &lt;td style="text-align: center"&gt;DC엔코더 모터 &amp;amp; 커넥터&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-04.png" alt="/image/r/ESP32-RC-Car-04.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;19&lt;/td&gt;
 &lt;td style="text-align: center"&gt;모터 브라켓&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 67%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-07.png" alt="/image/r/ESP32-RC-Car-07.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;20&lt;/td&gt;
 &lt;td style="text-align: center"&gt;샤프트&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-10.png" alt="/image/r/ESP32-RC-Car-10.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;21&lt;/td&gt;
 &lt;td style="text-align: center"&gt;써클립&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-24.png" alt="/image/r/ESP32-RC-Car-24.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;22&lt;/td&gt;
 &lt;td style="text-align: center"&gt;샤프트 베어링&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-21.png" alt="/image/r/ESP32-RC-Car-21.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;4&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;23&lt;/td&gt;
 &lt;td style="text-align: center"&gt;기어&lt;br&gt;(무두볼트(Set Screw) 포함)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-05.png" alt="/image/r/ESP32-RC-Car-05.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;24&lt;/td&gt;
 &lt;td style="text-align: center"&gt;육각 샤프트 커플링 커넥터&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-06.png" alt="/image/r/ESP32-RC-Car-06.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;25&lt;/td&gt;
 &lt;td style="text-align: center"&gt;범퍼&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-02.png" alt="/image/r/ESP32-RC-Car-02.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;26&lt;/td&gt;
 &lt;td style="text-align: center"&gt;샤시 상판&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-34.png" alt="/image/r/ESP32-RC-Car-34.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;27&lt;/td&gt;
 &lt;td style="text-align: center"&gt;락스위치&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-20.png" alt="/image/r/ESP32-RC-Car-20.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;28&lt;/td&gt;
 &lt;td style="text-align: center"&gt;황동 육각 스터드&lt;br&gt;(M3×22mm)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-26.png" alt="/image/r/ESP32-RC-Car-26.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;6&lt;/td&gt;
 &lt;td style="text-align: center"&gt;휠 베이스 고정용 4개, 상판 고정용 2개&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;29&lt;/td&gt;
 &lt;td style="text-align: center"&gt;황동 육각 스터드&lt;br/&gt;(M3×16mm)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-27.png" alt="/image/r/ESP32-RC-Car-27.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;범퍼 고정용 2개&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;30&lt;/td&gt;
 &lt;td style="text-align: center"&gt;볼트&lt;br/&gt;(Pan head, M4×6mm)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-32.png" alt="/image/r/ESP32-RC-Car-32.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;6&lt;/td&gt;
 &lt;td style="text-align: center"&gt;모터 브라켓과 샤시 하판 고정용 6개&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;31&lt;/td&gt;
 &lt;td style="text-align: center"&gt;볼트&lt;br&gt;(Bind-Washer head, M3×6mm)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-28.png" alt="/image/r/ESP32-RC-Car-28.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;10&lt;/td&gt;
 &lt;td style="text-align: center"&gt;서보모터와 서보모터 브라켓 고정용 4개, 서보모터 브라켓과 샤시하판 고정용 4개, 범퍼 고정용 2개&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;32&lt;/td&gt;
 &lt;td style="text-align: center"&gt;볼트&lt;br&gt;(Bind head, M3×8mm)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-30.png" alt="/image/r/ESP32-RC-Car-30.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;14&lt;/td&gt;
 &lt;td style="text-align: center"&gt;육각 스터드 고정용 12개, 범퍼 고정용 2개&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;33&lt;/td&gt;
 &lt;td style="text-align: center"&gt;볼트&lt;br/&gt;(Pan head, M2.5×10mm)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-29.png" alt="/image/r/ESP32-RC-Car-29.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;7&lt;/td&gt;
 &lt;td style="text-align: center"&gt;커넥팅 로드 연결용 3개, 휠 베이스 연결용 4개&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;34&lt;/td&gt;
 &lt;td style="text-align: center"&gt;볼트&lt;br&gt;(Flat head, M2.5×5mm)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-31.png" alt="/image/r/ESP32-RC-Car-31.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;4&lt;/td&gt;
 &lt;td style="text-align: center"&gt;모터와 모터브라켓 고정&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;35&lt;/td&gt;
 &lt;td style="text-align: center"&gt;육각렌치&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-33.png" alt="/image/r/ESP32-RC-Car-33.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;1&lt;/td&gt;
 &lt;td style="text-align: center"&gt;기어 무두볼트용&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;36&lt;/td&gt;
 &lt;td style="text-align: center"&gt;저항&lt;br&gt;1K or 5.1K&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/r/ESP32-RC-Car-13.png" alt="/image/r/ESP32-RC-Car-13.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;(선택사항) 인코더 풀업저항&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;37&lt;/td&gt;
 &lt;td style="text-align: center"&gt;홀센서 칩&lt;br&gt;SH41F(SOT-23타입)&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;2&lt;/td&gt;
 &lt;td style="text-align: center"&gt;(선택사항) 홀 센서를 이중채널로 사용할 필요가 있는 경우에, 각 모터마다 1개씩 추가함&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;총&lt;/td&gt;
 &lt;td style="text-align: center"&gt;36종&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;h4 id="전륜-조향-휠-조립"&gt;전륜 조향 휠 조립&lt;a class="anchor" href="#%ec%a0%84%eb%a5%9c-%ec%a1%b0%ed%96%a5-%ed%9c%a0-%ec%a1%b0%eb%a6%bd"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;사진 오른쪽부터 차례대로 8개의 부품을 끼워 휠을 조립한다. (왼쪽휠/오른쪽휠 각각 1개씩, 총 2개 조립)&lt;/p&gt;</description></item><item><title>ESP32, DC모터, TB6612FNG</title><link>https://stemwith.github.io/posts/esp32-dc%EB%AA%A8%ED%84%B0/</link><pubDate>Mon, 01 Nov 2021 18:27:53 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-dc%EB%AA%A8%ED%84%B0/</guid><description>&lt;h3 id="dc모터-사용하기"&gt;DC모터 사용하기&lt;a class="anchor" href="#dc%eb%aa%a8%ed%84%b0-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;아두이노의 경우와 마찬가지로 ESP32에서도 TB6612FNG 모터드라이버와 함께, 모터 및 아두이노 단독사용을 위하여 3.7V 18650 2개를 직렬로 연결한 외부전원을 사용한다.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id="tb6612fng"&gt;TB6612FNG&lt;a class="anchor" href="#tb6612fng"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id="기본-핀-배열"&gt;기본 핀 배열&lt;a class="anchor" href="#%ea%b8%b0%eb%b3%b8-%ed%95%80-%eb%b0%b0%ec%97%b4"&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th style="text-align: center"&gt;VM&lt;br/&gt;VCC&lt;br/&gt;GND(*)&lt;br/&gt;AOUT1&lt;br/&gt;AOUT2&lt;br/&gt;BOUT2&lt;br/&gt;BOUT1&lt;br/&gt;GND&lt;/th&gt;
 &lt;th style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/t/tb6612fng-01.png" alt="/image/t/tb6612fng-01.png"&gt;

 
 
&lt;/figure&gt;&lt;/th&gt;
 &lt;th style="text-align: center"&gt;PWMA&lt;br/&gt;AIN2&lt;br/&gt;AIN1&lt;br/&gt;STBY&lt;br/&gt;BIN1&lt;br/&gt;BIN2&lt;br/&gt;PWMB&lt;br/&gt;GND&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/t/tb6612fng-02.png" alt="/image/t/tb6612fng-02.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;h5 id="핀-배열이-다른-경우"&gt;핀 배열이 다른 경우&lt;a class="anchor" href="#%ed%95%80-%eb%b0%b0%ec%97%b4%ec%9d%b4-%eb%8b%a4%eb%a5%b8-%ea%b2%bd%ec%9a%b0"&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th style="text-align: center"&gt;GND&lt;br/&gt;VCC&lt;br/&gt;AOUT1&lt;br/&gt;AOUT2&lt;br/&gt;BOUT2&lt;br/&gt;BOUT1&lt;br/&gt;VM&lt;br/&gt;GND&lt;/th&gt;
 &lt;th style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/t/tb6612fng-03.png" alt="/image/t/tb6612fng-03.png"&gt;

 
 
&lt;/figure&gt;&lt;/th&gt;
 &lt;th style="text-align: center"&gt;PWMA&lt;br/&gt;AIN2&lt;br/&gt;AIN1&lt;br/&gt;NC (=STBY)&lt;br/&gt;BIN1&lt;br/&gt;BIN2&lt;br/&gt;PWMB&lt;br/&gt;GND&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;






&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/t/tb6612fng-04.png" alt="/image/t/tb6612fng-04.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td style="text-align: center"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;VM (모터 전압) = 15V max&lt;/li&gt;
&lt;li&gt;VCC (로직 전압) = 2.7 ~ 5.5V&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GND&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;TB6612FNG 모듈을 여러개 테스트한 결과, 기본 핀 배열을 가진 모듈의 &lt;strong&gt;3번핀 GND&lt;/strong&gt;에 연결할 경우 &lt;strong&gt;작동이 안되는&lt;/strong&gt; 몇몇 제품이 있었음&lt;/li&gt;
&lt;li&gt;그러므로 &lt;strong&gt;8번핀, 9번핀의 GND 사용을 권장&lt;/strong&gt;함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;출력전류: 정전류 1.2A (3.2A peak)까지 (모터 2개 사용시 합산 전류임)&lt;/li&gt;
&lt;li&gt;모터 제어모드: CW, CCW, short-brake, STOP, stand-by&lt;/li&gt;
&lt;li&gt;두개의 모터 출력을 개별 제어하며, &lt;strong&gt;100kHz&lt;/strong&gt;의 PWM으로 속도 제어&lt;/li&gt;
&lt;li&gt;써멀 셧다운 및 저전압 감지회로 내장&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h5 id="pin의-사용"&gt;Pin의 사용&lt;a class="anchor" href="#pin%ec%9d%98-%ec%82%ac%ec%9a%a9"&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;ESP32와 TB6612FNG모듈을 브레드보드를 통해 연결하기 쉽도록 핀을 구성한 Pinmap이므로, 필요에 따라 수정하여 사용할 수 있다. (아래표는 참고만 할 것!)&lt;/p&gt;</description></item><item><title>ESP32, nRF24L01 무선통신</title><link>https://stemwith.github.io/posts/esp32-nrf24l01/</link><pubDate>Sun, 10 Oct 2021 18:27:53 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-nrf24l01/</guid><description>&lt;h3 id="nrf24l01"&gt;nRF24L01&lt;a class="anchor" href="#nrf24l01"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="library"&gt;library&lt;a class="anchor" href="#library"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;스케치&lt;/strong&gt;&amp;gt; &lt;strong&gt;라이브러리 포함하기&lt;/strong&gt;&amp;gt; &lt;strong&gt;라이브러리 관리&lt;/strong&gt;&amp;gt; &lt;strong&gt;nRF24L01&lt;/strong&gt; 검색한 후, &lt;strong&gt;RF24 by TMRh20, Avamander&lt;/strong&gt; 설치&lt;/p&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/n/ESP32-nRF24L01-02.png" alt="/image/n/ESP32-nRF24L01-02.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;h4 id="schematic-nrf24l01-receiver-with-esp32"&gt;schematic: nRF24L01 receiver with ESP32&lt;a class="anchor" href="#schematic-nrf24l01-receiver-with-esp32"&gt;#&lt;/a&gt;&lt;/h4&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/n/ESP32-nRF24L01-01.png" alt="/image/n/ESP32-nRF24L01-01.png"&gt;

 
 
&lt;/figure&gt;
&lt;p&gt;※ nRF24L01 모듈에 따라 10uF 캐페시터가 없으면 통신이 안되는 경우가 있음. 이런 경우에만 사용할 것.&lt;/p&gt;
&lt;br&gt;
&lt;h5 id="pinmap-안테나를-위로-향하게-두고-모듈을-위에서-내려다-볼때의-핀배열"&gt;pinmap: (안테나를 위로 향하게 두고, 모듈을 위에서 내려다 볼때의 핀배열)&lt;a class="anchor" href="#pinmap-%ec%95%88%ed%85%8c%eb%82%98%eb%a5%bc-%ec%9c%84%eb%a1%9c-%ed%96%a5%ed%95%98%ea%b2%8c-%eb%91%90%ea%b3%a0-%eb%aa%a8%eb%93%88%ec%9d%84-%ec%9c%84%ec%97%90%ec%84%9c-%eb%82%b4%eb%a0%a4%eb%8b%a4-%eb%b3%bc%eb%95%8c%ec%9d%98-%ed%95%80%eb%b0%b0%ec%97%b4"&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;ESP32&lt;/th&gt;
 &lt;th&gt;3V3&lt;/th&gt;
 &lt;th&gt;IO5&lt;/th&gt;
 &lt;th&gt;IO23&lt;/th&gt;
 &lt;th&gt;None&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;↑&lt;/td&gt;
 &lt;td&gt;↑&lt;/td&gt;
 &lt;td&gt;↑&lt;/td&gt;
 &lt;td&gt;↑&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;nRF24L01&lt;/td&gt;
 &lt;td&gt;VCC + 10uF&lt;/td&gt;
 &lt;td&gt;CSN&lt;/td&gt;
 &lt;td&gt;MOSI&lt;/td&gt;
 &lt;td&gt;IRQ&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;(위에서 보이는 핀배열)&lt;/td&gt;
 &lt;td&gt;GND + 10uF&lt;/td&gt;
 &lt;td&gt;CE&lt;/td&gt;
 &lt;td&gt;SCK&lt;/td&gt;
 &lt;td&gt;MISO&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;↓&lt;/td&gt;
 &lt;td&gt;↓&lt;/td&gt;
 &lt;td&gt;↓&lt;/td&gt;
 &lt;td&gt;↓&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;ESP32&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;&lt;strong&gt;GND&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;&lt;strong&gt;IO4&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;&lt;strong&gt;IO18&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;&lt;strong&gt;IO19&lt;/strong&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;h4 id="sketch-11-chat-room"&gt;sketch: 1:1 Chat Room&lt;a class="anchor" href="#sketch-11-chat-room"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;양방향 송수신을 위하여 위 회로도를 보고 2개의 모듈을 만든 뒤, 다음 스케치를 업로드한다.&lt;/li&gt;
&lt;li&gt;시리얼 모니터를 띄운 뒤, 메세지를 전송해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-C++" data-lang="C++"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;//Libraries for NRF24L01+ module.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;SPI.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;nRF24L01.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;RF24.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;//RF24 object with two pins defined with arguments. CE: 4, CSN: 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="n"&gt;RF24&lt;/span&gt; &lt;span class="nf"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;//Address of the pipe. 40 bit long, you can choose this freely.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;//Remember to use different address in different projects.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1234ABCDEFLL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;stext&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;spos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;rtext&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rpos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sendText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tlen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stopListening&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openWritingPipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tlen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;SEND: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openReadingPipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startListening&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;//Start the radio
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;115200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;//Open reading pipe with given address and start listening for incoming data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openReadingPipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPALevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RF24_PA_MIN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startListening&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;stext&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stext&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x0a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;sendText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;spos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;spos&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rtext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;RECV: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rtext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h4 id="sketch-11-chat-room-1"&gt;sketch: 1:1 Chat Room&lt;a class="anchor" href="#sketch-11-chat-room-1"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;다음은 처음 실행 후 시리얼모니터에 입력한 ID를 이용하여 Chat Room을 만드는 코드이다.&lt;/p&gt;</description></item><item><title>ESP32, OLED (한글 출력 하기)</title><link>https://stemwith.github.io/posts/esp32-oled/</link><pubDate>Sun, 26 Sep 2021 18:27:53 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-oled/</guid><description>&lt;h3 id="oled"&gt;OLED&lt;a class="anchor" href="#oled"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="종류"&gt;종류&lt;a class="anchor" href="#%ec%a2%85%eb%a5%98"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ESP32나 Arduino에서 사용할 수 있는 oled의 종류는 매우 많지만, 주로 128*64 픽셀을 가진 0.96인치, 1.3인치의 SSD1306, SH1106 컨트롤러를 사용한 oled가 판매되고 있으며, 통신 프로토콜은 I2C나 SPI를 사용한다. oled 모듈 구입시 픽셀수, 컨트롤러 및 통신프로토콜을 잘 알아두어야 스케치 작성시 참고할 수 있음에 유의한다. I2C 방식은 GPIO를 2개만 사용하여 구성이 쉽다는 장점이 있고, SPI방식은 4~5개의 GPIO를 사용하지만 속도가 빠르다는 장점이 있다. 겉모습만으로는 컨트롤러를 확인하기는 어렵다.&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;I2C&lt;/th&gt;
 &lt;th&gt;SPI&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/u/u8g2-oled-i2c-01.png" alt="/image/u/u8g2-oled-i2c-01.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/u/u8g2-oled-spi-01.png" alt="/image/u/u8g2-oled-spi-01.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/u/u8g2-oled-i2c-02.png" alt="/image/u/u8g2-oled-i2c-02.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;td&gt;






&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/u/u8g2-oled-spi-02.png" alt="/image/u/u8g2-oled-spi-02.png"&gt;

 
 
&lt;/figure&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이밖에도 U8g2 라이브러리에서 사용가능한 다양한 oled의 종류를 아래 링크에서 확인할 수 있다.&lt;/p&gt;</description></item><item><title>ESP32, 스텝모터</title><link>https://stemwith.github.io/posts/esp32-%EC%8A%A4%ED%85%9D%EB%AA%A8%ED%84%B0-%EC%A0%9C%EC%96%B4/</link><pubDate>Sat, 25 Sep 2021 18:27:53 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-%EC%8A%A4%ED%85%9D%EB%AA%A8%ED%84%B0-%EC%A0%9C%EC%96%B4/</guid><description>&lt;h3 id="스텝-모터-28byj-48"&gt;스텝 모터, 28BYJ-48&lt;a class="anchor" href="#%ec%8a%a4%ed%85%9d-%eb%aa%a8%ed%84%b0-28byj-48"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="specification"&gt;Specification&lt;a class="anchor" href="#specification"&gt;#&lt;/a&gt;&lt;/h4&gt;







&lt;figure
 
 class="center"

 
 style="width: 50%;"&gt;

 &lt;img src="https://stemwith.github.io/image/s/Step-Motor-02.png" alt="/image/s/Step-Motor-02.png"&gt;

 
 
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;정격전압: 5VDC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기어비: 1/64&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;span&gt;\[ \frac {32}{9} \times \frac {22}{11} \times \frac {26}{9} \times \frac {31}{10} = 63.68395 \fallingdotseq 64 \]&lt;/span&gt;






&lt;figure
 
 class="center"

 
 style="width: 50%;"&gt;

 &lt;img src="https://stemwith.github.io/image/s/Step-Motor-01.png" alt="/image/s/Step-Motor-01.png"&gt;

 
 
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;스트라이드 각도
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;스펙상 5.625º / 64&lt;/strong&gt; = 0.087890625
&lt;ul&gt;
&lt;li&gt;그러므로, 360º / 0.087890625 = 4096 스텝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;실제로는 11.25º / 64&lt;/strong&gt; = 0.17578125
&lt;ul&gt;
&lt;li&gt;그러므로, 360º / 0.17578125 = &lt;strong&gt;2048 스텝으로 1회전&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Frequency: 100Hz&lt;/li&gt;
&lt;li&gt;토크: 34.3mN,m&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id="모터드라이브-uln2003"&gt;모터드라이브 ULN2003&lt;a class="anchor" href="#%eb%aa%a8%ed%84%b0%eb%93%9c%eb%9d%bc%ec%9d%b4%eb%b8%8c-uln2003"&gt;#&lt;/a&gt;&lt;/h3&gt;







&lt;figure
 
 class="center"

 
 style="width: 50%;"&gt;

 &lt;img src="https://stemwith.github.io/image/s/Step-Motor-03.png" alt="/image/s/Step-Motor-03.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h3 id="스텝-모터의-구동"&gt;스텝 모터의 구동&lt;a class="anchor" href="#%ec%8a%a4%ed%85%9d-%eb%aa%a8%ed%84%b0%ec%9d%98-%ea%b5%ac%eb%8f%99"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="schematic"&gt;schematic&lt;a class="anchor" href="#schematic"&gt;#&lt;/a&gt;&lt;/h4&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/s/Step-Motor-04.png" alt="/image/s/Step-Motor-04.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;h4 id="pin-map"&gt;Pin Map&lt;a class="anchor" href="#pin-map"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;외부전원&lt;/th&gt;
 &lt;th&gt;모터드라이브&lt;/th&gt;
 &lt;th&gt;ESP32&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;INT1&lt;/td&gt;
 &lt;td&gt;19&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;INT2&lt;/td&gt;
 &lt;td&gt;18&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;INT3&lt;/td&gt;
 &lt;td&gt;5&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;INT4&lt;/td&gt;
 &lt;td&gt;17&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;(+) 5V&lt;/td&gt;
 &lt;td&gt;GND&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;(-)&lt;/td&gt;
 &lt;td&gt;VCC&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;※ 모터드라이브에 연결하는 전원(VCC)는 &lt;strong&gt;외부전원 5V를 사용&lt;/strong&gt;한다. (ESP32의 5V는, 전류가 부족하여 ESP32와 연결한 노트북에 영향을 줄 수 있으므로, 사용하지 않는 것이 좋다.)&lt;/p&gt;</description></item><item><title>ESP32, 온도측정(DS18b20), PLX_DAQ</title><link>https://stemwith.github.io/posts/esp32-%EC%98%A8%EB%8F%84%EC%B8%A1%EC%A0%95-ds18b20/</link><pubDate>Fri, 17 Sep 2021 00:41:00 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-%EC%98%A8%EB%8F%84%EC%B8%A1%EC%A0%95-ds18b20/</guid><description>&lt;h3 id="ds18b20-온도센서"&gt;DS18b20 온도센서&lt;a class="anchor" href="#ds18b20-%ec%98%a8%eb%8f%84%ec%84%bc%ec%84%9c"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;DS18b20 온도 센서를 이용하여 온도를 측정한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one-wire 버스 통신&lt;/li&gt;
&lt;li&gt;공급전압: 3.0V ~ 5.5V&lt;/li&gt;
&lt;li&gt;작동온도: -55ºC ~ +125ºC&lt;/li&gt;
&lt;li&gt;오차: +/-0.5 ºC (-10ºC ~ 85ºC 범위에서)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id="pinout"&gt;Pinout&lt;a class="anchor" href="#pinout"&gt;#&lt;/a&gt;&lt;/h4&gt;







&lt;figure
 
 class="center"

 
 style="width: 25%;"&gt;

 &lt;img src="https://stemwith.github.io/image/DS18b20.png" alt="/image/DS18b20.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;h4 id="schematic"&gt;schematic&lt;a class="anchor" href="#schematic"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;DS18b20 센서는 두 가지 연결방법을 제공하는데, 하나는 VCC를 5V에 연결하는 Normal Mode이고 다른 하나는 VCC를 GND에 연결하는 Parasite Mode이다. 두가지 방법 모두 지원되지만 (경험상) Normal를 추천하며 (원인은 잘 모르겠지만) Parasite Mode에서는 온도센서가 작동이 되지 않는 경우도 가끔 있었다. 회로 구성을 위해 &lt;strong&gt;4.7㏀ 저항 1개&lt;/strong&gt;가 필요하며 Normal Mode 구성을 위해 다음 그림과 같이 연결한다.&lt;/p&gt;</description></item><item><title>esp32 서보모터 PWM제어</title><link>https://stemwith.github.io/posts/esp32-%EC%84%9C%EB%B3%B4%EB%AA%A8%ED%84%B0-%EC%A0%9C%EC%96%B4/</link><pubDate>Mon, 19 Oct 2020 23:41:02 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-%EC%84%9C%EB%B3%B4%EB%AA%A8%ED%84%B0-%EC%A0%9C%EC%96%B4/</guid><description>&lt;h3 id="sg90-mg90s--mg966r-서보모터"&gt;SG90, MG90S, MG966R 서보모터&lt;a class="anchor" href="#sg90-mg90s--mg966r-%ec%84%9c%eb%b3%b4%eb%aa%a8%ed%84%b0"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="datasheet"&gt;datasheet&lt;a class="anchor" href="#datasheet"&gt;#&lt;/a&gt;&lt;/h4&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/SG90_Datasheet.jpg" alt="/image/SG90_Datasheet.jpg"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;h4 id="사용법"&gt;사용법&lt;a class="anchor" href="#%ec%82%ac%ec%9a%a9%eb%b2%95"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ESP32는 16개의 PWM채널이 있으므로, 최대 16개의 서보모터를 동시에 제어할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;서보모터 데이터 시트의 스펙상으로는&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;대부분의 서보모터(&lt;strong&gt;SG90, MG90S, MG966R&lt;/strong&gt; 등 포함)는 위의 그림처럼 20ms가 1주기가 되므로, PWM frequency를 50Hz로 설정한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;20ms가 1주기이고, HIGH 펄스가 2ms 지속될 때 180º 회전을 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그러므로, 전체 펄스 폭의 1/10만큼 HIGH 펄스가 주어지면 180º 회전을 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resolution이 16비트라면 65535의 1/10에 해당하는 &lt;strong&gt;6554&lt;/strong&gt; 의 값이 duty값으로 주어지면 서보모터는 180º 회전을 한다.&lt;/p&gt;</description></item><item><title>esp32 OpenWeatherMap에서 실시간 날씨 정보 받기</title><link>https://stemwith.github.io/posts/esp32-openweathermap/</link><pubDate>Tue, 19 Nov 2019 18:27:53 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-openweathermap/</guid><description>&lt;h3 id="openweathermaporg"&gt;OpenWeatherMap.org&lt;a class="anchor" href="#openweathermaporg"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://openweathermap.org/"&gt;OpenWeatherMap&lt;/a&gt;은 세계 각 지역의 현재 날씨, 예보, 과거 날씨 데이터를 제공하는 사이트입니다. (몇가지 제약이 있긴 하지만) 회원가입을 통해서 API Key를 생성하고 이를 통해 무료로 실시간 날씨 정보를 얻을 수 있습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id="free-current-weather-and-forecasts-collection"&gt;Free Current weather and forecasts collection&lt;a class="anchor" href="#free-current-weather-and-forecasts-collection"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;60 Calls per minute (no more than)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openweathermap.org/current"&gt;Current weather API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openweathermap.org/forecast5"&gt;5 days/3 hour forecast API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openweathermap.org/api/weathermaps"&gt;Weather maps 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openweathermap.org/api/uvi"&gt;UV index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openweathermap.org/triggers"&gt;Weather alerts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Availability 95%&lt;/li&gt;
&lt;li&gt;Weather API data update &amp;lt; 2 hours&lt;/li&gt;
&lt;li&gt;Weather maps data update &amp;lt; 3 hours&lt;/li&gt;
&lt;li&gt;API lifetime support : Current version&lt;/li&gt;
&lt;li&gt;Historical weather collection은 모두 Starter 이상(유료)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id="current-weather-collections-api-key-생성"&gt;Current weather collections API Key 생성&lt;a class="anchor" href="#current-weather-collections-api-key-%ec%83%9d%ec%84%b1"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sign Up을 클릭하여 회원가입을 하고,&lt;/p&gt;</description></item><item><title>esp32 BLE, Blynk Gauge</title><link>https://stemwith.github.io/posts/esp32-ble-blynk-gauge/</link><pubDate>Wed, 23 Oct 2019 21:33:48 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-ble-blynk-gauge/</guid><description>&lt;h3 id="esp32에서-blynk로-센서값-보내기"&gt;ESP32에서 Blynk로 센서값 보내기&lt;a class="anchor" href="#esp32%ec%97%90%ec%84%9c-blynk%eb%a1%9c-%ec%84%bc%ec%84%9c%ea%b0%92-%eb%b3%b4%eb%82%b4%ea%b8%b0"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Blynk App의 GAUGE 위젯을 사용하여 ESP32에 연결된 Potentiometer의 저항값을 읽어 Blynk App에 전압(V), 저항(㏀) 값을 표시해본다. (ESP32 → Blynk App)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ESP32의 Potentiometer 값을 읽기 위해 BLYNK_READ(Vpin)을 사용한다.&lt;/li&gt;
&lt;li&gt;새로운 프로젝트를 만드는 경우, 새로운 auth token을 받아서 사용해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id="schematic"&gt;schematic&lt;a class="anchor" href="#schematic"&gt;#&lt;/a&gt;&lt;/h4&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-01.png" alt="/image/blynk-adc-01.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;h4 id="sketch"&gt;sketch&lt;a class="anchor" href="#sketch"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-C" data-lang="C"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define BLYNK_PRINT Serial
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define BLYNK_USE_DIRECT_CONNECT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;BlynkSimpleEsp32_BLE.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;BLEDevice.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;BLEServer.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// You should get Auth Token in the Blynk App.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// Go to the Project Settings (nut icon).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;WUAeS6P57T3XNaIGyLK1-OUv........&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// Potentiometer Pin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define PIN_POTENTIOMETER A0 &lt;/span&gt;&lt;span class="c1"&gt;// Potentiometer GPIO 36
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// Resist, Voltage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value_Potentiometer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value_R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;value_V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// Debug console
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;115200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Waiting for connections...&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// for Blynk 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="n"&gt;Blynk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setDeviceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Blynk-t&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Blynk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;value_Potentiometer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;analogRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PIN_POTENTIOMETER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 12bit ADC (0~4095)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="n"&gt;value_V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_Potentiometer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4095&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0~3300mV
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="n"&gt;value_R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_V&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0~10kΩ
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Blynk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Resist : &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_R&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Ω&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Voltage: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_V&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;mV&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nf"&gt;BLYNK_READ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ESP32 -&amp;gt; widget virtual pin1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Blynk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;virtualWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value_R&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nf"&gt;BLYNK_READ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ESP32 -&amp;gt; widget virtual pin1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Blynk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;virtualWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value_V&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Blynk에서 2개의 Gauge를 사용하기 위해 BLYNK)READ(Vpin)을 2번 사용한다.&lt;/li&gt;
&lt;li&gt;Blynk.virtualWrite(Vpin, value)를 통해 Blynk App의 Gauge 위젯에서 지정한 virtual pin에 value값을 표시한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h3 id="blynk-설정"&gt;Blynk 설정&lt;a class="anchor" href="#blynk-%ec%84%a4%ec%a0%95"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;새로운 프로젝트를 생성한다.
&lt;ul&gt;
&lt;li&gt;NAME : ESP32_Potentiometer&lt;/li&gt;
&lt;li&gt;CHOOSE DEVICE : ESP32 Dev Board&lt;/li&gt;
&lt;li&gt;CONNECTION TYPE : BLE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-02.png" alt="/image/blynk-adc-02.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="2"&gt;
&lt;li&gt;이메일로 발송된 토큰을 복사한다.&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-03.png" alt="/image/blynk-adc-03.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="3"&gt;
&lt;li&gt;+버튼을 눌러 위젯을 추가할 수 있는 화면으로 진입한다.&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-04.png" alt="/image/blynk-adc-04.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="4"&gt;
&lt;li&gt;먼저 BLE 위젯을 선택하여 ESP32와 Blynk간의 통신 방법을 지정한다.&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-05.png" alt="/image/blynk-adc-05.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="5"&gt;
&lt;li&gt;블루투스 모양의 위젯 버튼을 눌러 Blynk와의 통신을 준비한다.&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-06.png" alt="/image/blynk-adc-06.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="6"&gt;
&lt;li&gt;Connect BLE device&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-07.png" alt="/image/blynk-adc-07.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="7"&gt;
&lt;li&gt;연결하고자 하는 BLE 장비를 선택하면,&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-08.png" alt="/image/blynk-adc-08.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="8"&gt;
&lt;li&gt;연결 확인!&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-09.png" alt="/image/blynk-adc-09.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="9"&gt;
&lt;li&gt;+버튼을 눌러 출력 위젯 2개를 추가한다. (Gauge, Labeled value)&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-10.png" alt="/image/blynk-adc-10.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="10"&gt;
&lt;li&gt;먼저 Gauge 위젯을 선택한다.&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-11.png" alt="/image/blynk-adc-11.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="11"&gt;
&lt;li&gt;Gauge 위젯이 추가되면 육각형 모양의 아이콘을 눌러 GAUGE Setting 화면으로 진입한다.&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-12.png" alt="/image/blynk-adc-12.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-13.png" alt="/image/blynk-adc-13.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="12"&gt;
&lt;li&gt;설정화면에서 다음 4가지를 설정한다.
&lt;ul&gt;
&lt;li&gt;NAME : 저항&lt;/li&gt;
&lt;li&gt;INPUT : V1, 0~1000&lt;/li&gt;
&lt;li&gt;LABEL : (단위를 표시하기 위해) x10 Ohm 을 적는다.&lt;/li&gt;
&lt;li&gt;READING RATE : 1sec (PUSH 위젯은 실행되지 않음)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-14.png" alt="/image/blynk-adc-14.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="13"&gt;
&lt;li&gt;Labeled Value 위젯을 추가하고, 다음과 같이 설정한다.
&lt;ul&gt;
&lt;li&gt;NAME : 저항&lt;/li&gt;
&lt;li&gt;INPUT : V2, 0~3300&lt;/li&gt;
&lt;li&gt;LABEL : (단위를 표시하기 위해) mV 를 적는다.&lt;/li&gt;
&lt;li&gt;READING RATE : 1sec (PUSH 위젯은 실행되지 않음)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-15.png" alt="/image/blynk-adc-15.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="14"&gt;
&lt;li&gt;상단의 뒤로가기 화살표를 눌러 프로젝트 바탕화면으로 돌아간다.&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-16.png" alt="/image/blynk-adc-16.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="15"&gt;
&lt;li&gt;여기서 플레이버튼을 누르면,&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 33%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-adc-17.png" alt="/image/blynk-adc-17.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;p&gt;저항과 전압의 측정이 시작된다. (시리얼 모니터에서도 관찰 가능)&lt;/p&gt;</description></item><item><title>esp32 BLE, Blynk Slider (PWM)</title><link>https://stemwith.github.io/posts/esp32-ble-blynk-slider-pwm/</link><pubDate>Tue, 22 Oct 2019 23:55:21 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-ble-blynk-slider-pwm/</guid><description>&lt;h3 id="esp32와-blynk에서의-pwm-사용"&gt;ESP32와 Blynk에서의 PWM 사용&lt;a class="anchor" href="#esp32%ec%99%80-blynk%ec%97%90%ec%84%9c%ec%9d%98-pwm-%ec%82%ac%ec%9a%a9"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Blynk app에서 Slider 위젯을 사용하여 App → ESP32로 PWM 신호를 보내 LED의 밝기를 조절해본다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blynk에서 Slider는 Virtual pin을 사용해야한다. (Digital핀을 선택하는 것이 불가능)&lt;/li&gt;
&lt;li&gt;Virtual pin을 사용하기 위해 BLYNK_WRITE(Vpin)을 사용한다.&lt;/li&gt;
&lt;li&gt;ESP32에서 PWM을 사용하기 위한 절차에 따라 코딩을 진행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id="schematic"&gt;schematic&lt;a class="anchor" href="#schematic"&gt;#&lt;/a&gt;&lt;/h4&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-pwm-01.png" alt="/image/blynk-pwm-01.png"&gt;

 
 
&lt;/figure&gt;
&lt;p&gt;※ LED모듈을 사용하는 경우 저항이 필요없다.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id="sketch"&gt;sketch&lt;a class="anchor" href="#sketch"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-C" data-lang="C"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define BLYNK_PRINT Serial
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define BLYNK_USE_DIRECT_CONNECT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;BlynkSimpleEsp32_BLE.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;BLEDevice.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;BLEServer.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// You should get Auth Token in the Blynk App.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// Go to the Project Settings (nut icon).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;rc77E7UrbQHhoLE-LV1Ajxz20k8eLBrk&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// setting PWM properties
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define LEDC_FREQ 5000 &lt;/span&gt;&lt;span class="c1"&gt;// Hz
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define LEDC_CHANNEL_0 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define LEDC_RESOLUTION 12 &lt;/span&gt;&lt;span class="c1"&gt;// 10bit (0~1023) 12bit(0~4095) 16bit(0~65535)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// led Pin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pin_ledR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nf"&gt;BLYNK_WRITE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// widget virtual pin5 -&amp;gt; ESP32
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value_V5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;asInt&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nf"&gt;ledcWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LEDC_CHANNEL_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value_V5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;V5 value: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_V5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// Debug console
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;115200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Waiting for connections...&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// configure LED PWM functionalitites
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="nf"&gt;ledcSetup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LEDC_CHANNEL_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LEDC_FREQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LEDC_RESOLUTION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// attach the same channel to the GPIO to be controlled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="nf"&gt;ledcAttachPin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pin_ledR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LEDC_CHANNEL_0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// for Blynk 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="n"&gt;Blynk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setDeviceName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Blynk-t&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Blynk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Blynk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h4 id="sketch-분석"&gt;sketch 분석&lt;a class="anchor" href="#sketch-%eb%b6%84%ec%84%9d"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Button 위젯 사용을 위해 사용하였던 예제 sketch에 다음의 라인을 추가하여야 한다.&lt;/p&gt;</description></item><item><title>esp32 BLE, Blynk Button</title><link>https://stemwith.github.io/posts/esp32-ble-blynk-button/</link><pubDate>Mon, 21 Oct 2019 23:12:58 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-ble-blynk-button/</guid><description>&lt;h3 id="blynk를-처음-사용하는-경우"&gt;Blynk를 처음 사용하는 경우&lt;a class="anchor" href="#blynk%eb%a5%bc-%ec%b2%98%ec%9d%8c-%ec%82%ac%ec%9a%a9%ed%95%98%eb%8a%94-%ea%b2%bd%ec%9a%b0"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="blynk-라이브러리-설치하기"&gt;Blynk 라이브러리 설치하기&lt;a class="anchor" href="#blynk-%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9f%ac%eb%a6%ac-%ec%84%a4%ec%b9%98%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;docs.blynk.cc 접속 – Downloads – Blynk Library&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blynkkk/blynk-library/releases/tag/v0.6.1"&gt;https://github.com/blynkkk/blynk-library/releases/tag/v0.6.1&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Blynk_Release_v0.6.1.zip 다운로드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;압축을 풀면 libraries, tools 폴더가 보임&lt;/li&gt;
&lt;li&gt;이 두 폴더를 아두이노IDE의 기본 스케치북 위치로 복사하여 붙여넣기 함
&lt;ul&gt;
&lt;li&gt;기존의 libraries 폴더와 합쳐짐&lt;/li&gt;
&lt;li&gt;기본 스케치북 위치 확인 방법
&lt;ul&gt;
&lt;li&gt;아두이노IDE – 파일 – 환경설정 – 설정탭 – 스케치북 위치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h4 id="스마트폰에-blynk-app-설치하기"&gt;스마트폰에 Blynk App 설치하기&lt;a class="anchor" href="#%ec%8a%a4%eb%a7%88%ed%8a%b8%ed%8f%b0%ec%97%90-blynk-app-%ec%84%a4%ec%b9%98%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;아이폰 : 애플 앱스토어&lt;/li&gt;
&lt;li&gt;안드로이드 : 구글 플레이스토어&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h3 id="버튼-위젯을-이용한-led-onoff-하기"&gt;버튼 위젯을 이용한 LED On/Off 하기&lt;a class="anchor" href="#%eb%b2%84%ed%8a%bc-%ec%9c%84%ec%a0%af%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%9c-led-onoff-%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="schematic"&gt;schematic&lt;a class="anchor" href="#schematic"&gt;#&lt;/a&gt;&lt;/h4&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/blynk-01.png" alt="/image/blynk-01.png"&gt;

 
 
&lt;/figure&gt;
&lt;p&gt;※ RGB LED 모듈을 사용하는 경우에는 저항을 연결하지 않는다.&lt;/p&gt;</description></item><item><title>esp32 ADC</title><link>https://stemwith.github.io/posts/esp32-adc/</link><pubDate>Sun, 20 Oct 2019 01:59:54 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-adc/</guid><description>&lt;h3 id="esp32-adc"&gt;ESP32 ADC&lt;a class="anchor" href="#esp32-adc"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ESP32는 18개의 12bit ADC 입력핀을 사용할 수 있다. (0~4095)&lt;/li&gt;
&lt;li&gt;아두이노의 경우 10bit를 사용한다. (0~1023)&lt;/li&gt;
&lt;li&gt;0V ~ 3.3V의 전압을 0~4095(0xFFF)까지의 디지털값으로 AD 변환한다.&lt;/li&gt;
&lt;li&gt;Arduino IDE 환경에서는 ESP32의 ADC 관련 레지스터를 조작하지 않고 analogRead() 함수를 사용하여 ESP32의 ADC 입력핀의 전압값을 가져올 수 있다. &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h3 id="potentiometer-저항값-출력하기"&gt;Potentiometer 저항값 출력하기&lt;a class="anchor" href="#potentiometer-%ec%a0%80%ed%95%ad%ea%b0%92-%ec%b6%9c%eb%a0%a5%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="schematic"&gt;schematic&lt;a class="anchor" href="#schematic"&gt;#&lt;/a&gt;&lt;/h4&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/esp32-adc-01.png" alt="/image/esp32-adc-01.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;h4 id="sketch"&gt;sketch&lt;a class="anchor" href="#sketch"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;가변저항의 저항을 A0(ADC1_CH0, GPIO36)로 읽고 전압값으로 변환한 뒤 시리얼 모니터로 출력한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-C" data-lang="C"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// ESP32 ADC test
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define analogPin A0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;115200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// read the input on analog pin GPIO36 (ADC1_CH0):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sensorValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;analogRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;analogPin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// Convert the analog (12bit ADC : 0 - 4095) to a voltage (0 - 3.3V):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;voltage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sensorValue&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;4095.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// print out the value you read:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;voltage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;br&gt;
&lt;h3 id="potentiometer로-led-밝기-조절하기"&gt;Potentiometer로 LED 밝기 조절하기&lt;a class="anchor" href="#potentiometer%eb%a1%9c-led-%eb%b0%9d%ea%b8%b0-%ec%a1%b0%ec%a0%88%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="schematic-1"&gt;schematic&lt;a class="anchor" href="#schematic-1"&gt;#&lt;/a&gt;&lt;/h4&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/esp32-adc-02.png" alt="/image/esp32-adc-02.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;LED : R → GPIO19 / G → GPIO18 / B → GPIO17 / GND&lt;/li&gt;
&lt;li&gt;저항 : R → 150Ω / G → 100Ω / B → 100Ω&lt;/li&gt;
&lt;li&gt;Potentiometer: Left 5V, Center AO(IO36), Right GND&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id="sketch-1"&gt;sketch&lt;a class="anchor" href="#sketch-1"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-C" data-lang="C"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define RED_LED 19 &lt;/span&gt;&lt;span class="c1"&gt;// GPIO 19
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define analogPin A0 &lt;/span&gt;&lt;span class="c1"&gt;// Sensor VP, GPIO 36
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 주파수
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ledChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 채널 (0 ~ 15 선택)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;resolution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 해상도 (1 ~ 16bit resolution 선택)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;115200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nf"&gt;ledcSetup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledChannel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resolution&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 지정된 채널, 주파수 및 해상도 설정
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="nf"&gt;ledcAttachPin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RED_LED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ledChannel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// LED 핀과 채널 연결
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;analogRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;analogPin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4095&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1023&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 12bit -&amp;gt; 10bit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34; ohm&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nf"&gt;ledcWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledChannel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>esp32 시작하기</title><link>https://stemwith.github.io/posts/esp32-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link><pubDate>Sat, 19 Oct 2019 15:22:37 +0900</pubDate><guid>https://stemwith.github.io/posts/esp32-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid><description>&lt;h3 id="esp32-시작하기"&gt;ESP32 시작하기&lt;a class="anchor" href="#esp32-%ec%8b%9c%ec%9e%91%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="driver-설치-처음-설치하는-경우"&gt;Driver 설치: 처음 설치하는 경우&lt;a class="anchor" href="#driver-%ec%84%a4%ec%b9%98-%ec%b2%98%ec%9d%8c-%ec%84%a4%ec%b9%98%ed%95%98%eb%8a%94-%ea%b2%bd%ec%9a%b0"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ESP32는 USB-to-Serial bridge로 Silicon Labs의 CP210x를 사용한다. &lt;a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers"&gt;제조사 홈페이지&lt;/a&gt;에서 자신이 사용하는 OS에 알맞는 CP210x 드라이버를 다운받아 설치한다.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;
&lt;h4 id="arduino-ide-설치"&gt;Arduino IDE 설치&lt;a class="anchor" href="#arduino-ide-%ec%84%a4%ec%b9%98"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.arduino.cc/en/software"&gt;Arduino IDE Download&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;https://www.arduino.cc/en/software&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;
&lt;h4 id="arduino-ide-설정"&gt;Arduino IDE 설정&lt;a class="anchor" href="#arduino-ide-%ec%84%a4%ec%a0%95"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Arduino IDE에서 &lt;strong&gt;파일&lt;/strong&gt;&amp;gt; &lt;strong&gt;환경설정&lt;/strong&gt;&amp;gt; &lt;strong&gt;설정&lt;/strong&gt; (&lt;strong&gt;File&lt;/strong&gt;&amp;gt; &lt;strong&gt;Preferences&lt;/strong&gt;&amp;gt; &lt;strong&gt;Settings&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/esp32-ide-01.jpg" alt="/image/esp32-ide-01.jpg"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;추가적인 보드 매니저 URLs에 아래 내용을 추가한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;https://dl.espressif.com/dl/package_esp32_index.json&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;ESP8266에 대한 URLs를 사용하고 있었다면, comma를 사용하여 구분하면 두가지를 모두 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;https://dl.espressif.com/dl/package_esp32_index.json, http://arduino.esp8266.com/stable/package_esp8266com_index.json&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;strong&gt;툴&lt;/strong&gt;&amp;gt; &lt;strong&gt;보드&lt;/strong&gt;&amp;gt; &lt;strong&gt;보드 매니저&lt;/strong&gt;&amp;hellip; &lt;strong&gt;Tools&lt;/strong&gt;&amp;gt; &lt;strong&gt;Board&lt;/strong&gt;&amp;gt; &lt;strong&gt;Board Manager&lt;/strong&gt;&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/esp32-ide-02.jpg" alt="/image/esp32-ide-02.jpg"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="3"&gt;
&lt;li&gt;보드 매니저에서 &amp;ldquo;ESP32&amp;quot;를 검색하여 &lt;strong&gt;INSTALL&lt;/strong&gt; (혹은 업데이트)&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/esp32-ide-03.jpg" alt="/image/esp32-ide-03.jpg"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="4"&gt;
&lt;li&gt;ESP32를 컴퓨터에 연결한 뒤, &lt;strong&gt;툴&lt;/strong&gt;&amp;gt; &lt;strong&gt;보드&lt;/strong&gt; 에서 ESP32 Dev Module 선택&lt;/li&gt;
&lt;/ol&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/esp32-ide-04.jpg" alt="/image/esp32-ide-04.jpg"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;ol start="5"&gt;
&lt;li&gt;&lt;strong&gt;툴&lt;/strong&gt;&amp;gt; &lt;strong&gt;포트&lt;/strong&gt; 에서 포트 선택 (단, ESP32용 포트가 선택이 되지 않으면  &lt;a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers"&gt;CP210x USB to UART Bridge VCP Drivers&lt;/a&gt;를 설치하여야 한다. Windows, Mac 등 사용하고 있는 OS에 적합한 드라이버를 클릭하여 설치한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h4 id="testing-installation"&gt;Testing Installation&lt;a class="anchor" href="#testing-installation"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id="example-1-led-blink"&gt;Example 1. LED Blink&lt;a class="anchor" href="#example-1-led-blink"&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;#include &amp;lt;Arduino.h&amp;gt;

const int R_ledPin = 19;

void setup() {
 // put your setup code here, to run once:
 Serial.begin(115200);
 pinMode(R_ledPin, OUTPUT);
}

void loop() {
 // put your main code here, to run repeatedly:
 digitalWrite(R_ledPin, HIGH);
 Serial.println(&amp;#34;LED is on&amp;#34;);
 delay(1000);
 digitalWrite(R_ledPin, LOW);
 Serial.println(&amp;#34;LED is off&amp;#34;);
 delay(1000);
}&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;ESP32 GPIO&lt;/th&gt;
 &lt;th&gt;19&lt;/th&gt;
 &lt;th&gt;GND&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;저항&lt;/td&gt;
 &lt;td&gt;150Ω&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;LED&lt;/td&gt;
 &lt;td&gt;(+)극&lt;/td&gt;
 &lt;td&gt;(-)극&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;







&lt;figure
 
 class="center"

 
 style="width: 75%;"&gt;

 &lt;img src="https://stemwith.github.io/image/esp32-example-01.png" alt="/image/esp32-example-01.png"&gt;

 
 
&lt;/figure&gt;
&lt;br&gt;
&lt;h5 id="upload"&gt;Upload&lt;a class="anchor" href="#upload"&gt;#&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;스케치 업로드는 아래 3가지 방법 중 하나로 진행할 수 있다.&lt;/p&gt;</description></item><item><title>esp32-WROOM-32D DevkitC V4</title><link>https://stemwith.github.io/posts/esp-wroom-32d-devkitc-v4/</link><pubDate>Sat, 19 Oct 2019 01:58:29 +0900</pubDate><guid>https://stemwith.github.io/posts/esp-wroom-32d-devkitc-v4/</guid><description>&lt;h3 id="esp32-wroom-32d-devkitc-v4"&gt;ESP32-WROOM-32D DevkitC V4&lt;a class="anchor" href="#esp32-wroom-32d-devkitc-v4"&gt;#&lt;/a&gt;&lt;/h3&gt;







&lt;figure
 
 class="center"

 
 style="width: 100%;"&gt;

 &lt;img src="https://stemwith.github.io/image/esp32-pinout.png" alt="/image/esp32-pinout.png"&gt;

 
 
&lt;/figure&gt;
&lt;p&gt;&lt;a href="https://stemwith.github.io/attach/ESP32-Pinout.hwp"&gt;핀아웃 다운로드&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;녹색핀: 사용에 적합한 핀&lt;/li&gt;
&lt;li&gt;노란색: 사용은 가능하나 부팅시 예기치 않은 동작이 발생할 수 있으므로 주의해야 하는 핀 (GPIO34~39는 Input only!)&lt;/li&gt;
&lt;li&gt;빨간색: 입력 또는 출력으로 사용할 수 없는 핀을 의미한다. (사용이 가능하더라도 사용하지 않음!)&lt;/li&gt;
&lt;li&gt;보라색: Wifi사용시 사용불가한 analog핀&lt;/li&gt;
&lt;li&gt;GPIO에서 Output이 가능한 모든 핀은 PWM으로 사용 가능&lt;/li&gt;
&lt;li&gt;ADC: 0-3.3V (0-4095) (0-0.15V구간과 3.1-3.3V의 값은 리니어하지 않으므로 구별이 거의 불가능함&lt;/li&gt;
&lt;li&gt;I2C: 아두이노IDE에서 사용하는 디폴트 핀&lt;/li&gt;
&lt;li&gt;RTC GPIO: Ultra Low Power(Deep Sleep)모드의 ESP32를 Wake up&lt;/li&gt;
&lt;li&gt;Strapping Pins: Bootloader나 Flashing시에 사용되며, 코드 업로드시 문제될 수 있음&lt;/li&gt;
&lt;li&gt;High at Boot, Low at Boot, BOOT, PWM at Boot: Boot시 신호가 나오며, Output으로 사용하면 reset이나 booting시에 문제가 될 수 있는 핀&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h3 id="peripheral"&gt;Peripheral&lt;a class="anchor" href="#peripheral"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ADC와 DAC 기능은 특정 핀에 고정되어 있다. 하지만 UART, I2C, SPI, PWM등의 기능은 어느 핀에 사용할지 결정해서 코드에서 지정해 줘야 한다. 소프트웨어에서 핀의 속성을 정의해 줄 수 있지만, 각 핀들은 디폴트로 지정되어 있는 기능들이 있다. (Pinout 참고)&lt;/p&gt;</description></item></channel></rss>